{"version":3,"sources":["features/userSlice.js","InputOption.js","Post.js","firebase.js","Feed.js","HeaderOption.js","Header.js","Login.js","Sidebar.js","Widgets.js","Footer.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["userSlice","createSlice","name","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","InputOption","title","Icon","color","className","style","Post","forwardRef","ref","message","description","photoUrl","timestamp","Avatar","src","ThumbUpOutlinedIcon","ChatOutlinedIcon","ShareOutlinedIcon","SendOutlinedIcon","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","auth","Feed","useSelector","useState","posts","setPosts","input","setInput","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","value","onChange","event","target","type","onClick","preventDefault","add","displayName","email","FieldValue","serverTimestamp","ImageIcon","SubscriptionsIcon","EventNoteIcon","CalendarViewDayIcon","firebaseTimestamp","Date","toDate","toUTCString","HeaderOption","avatar","Header","dispatch","useDispatch","alt","placeholder","HomeIcon","SupervisorAccountIcon","BusinessCenterIcon","ChatIcon","NotificationsIcon","signOut","Login","setEmail","password","setPassword","setName","profilePic","setProfilePic","signInWithEmailAndPassword","then","userAuth","uid","profileUrl","catch","error","alert","createUserWithEmailAndPassword","updateProfile","photoURL","Sidebar","recentItem","topic","Widgets","newsArticle","heading","subtitle","Footer","visibility","App","onAuthStateChanged","configureStore","reducer","userReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1584da83.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    user: null,\n  },\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload;\n    },\n    logout: (state) => {\n      state.user = null;\n    },\n  },\n});\n\nexport const { login, logout } = userSlice.actions;\n\n// Selectors\nexport const selectUser = (state) => state.user.user;\n\nexport default userSlice.reducer;","import React from 'react'\nimport './InputOption.css'\n\nfunction InputOption({title, Icon, color}) {\n    return (\n        <div className='inputOption'>\n            <Icon style={{ color:color }}/>\n            <h4>{title}</h4>\n\n            \n        </div>\n    )\n}\n\nexport default InputOption\n","import { Avatar } from '@material-ui/core'\nimport React from 'react'\nimport './Post.css'\nimport ThumbUpOutlinedIcon from '@material-ui/icons/ThumbUpOutlined';\nimport ChatOutlinedIcon from '@material-ui/icons/ChatOutlined';\nimport SendOutlinedIcon from '@material-ui/icons/SendOutlined';\nimport ShareOutlinedIcon from '@material-ui/icons/ShareOutlined';\nimport InputOption from './InputOption';\n// react-flip-move\nimport { forwardRef } from 'react';\n\n// function Post({name, description, message, photoUrl, timestamp}) {\n// React Flip Move implementation\nconst Post = forwardRef(({ name, description, message, photoUrl, timestamp}, ref) => {\n    return (\n        <div className='post'>\n            <div ref={ref} className=\"post__header\">\n                <Avatar src={photoUrl}>{name[0]}</Avatar>\n                <div className=\"post__info\">\n                    <h2>{name}</h2>\n                    {/* <p>{description}</p> */}\n                    <p>{timestamp}</p>\n                </div>\n\n            </div>\n\n            <div className=\"post__body\">\n                <p>{message}</p>\n            </div>\n\n                <div className=\"post__buttons\">\n                    <InputOption title='Like' Icon={ThumbUpOutlinedIcon} color='gray' />\n                    <InputOption title='Comment' Icon={ChatOutlinedIcon} color='gray' />\n                    <InputOption title='Share' Icon={ShareOutlinedIcon} color='gray' />\n                    <InputOption title='Send' Icon={SendOutlinedIcon} color='gray' />\n                </div>\n            \n            \n            \n        </div>\n    );\n});\n\nexport default Post\n","import firebase from 'firebase';\n\nconst firebaseConfig = {\n\n    apiKey: \"AIzaSyCjPJA-qZxFCDnj6x06NO1KRkXtPK7sPhU\",\n  \n    authDomain: \"linkedin-clone-3645e.firebaseapp.com\",\n  \n    projectId: \"linkedin-clone-3645e\",\n  \n    storageBucket: \"linkedin-clone-3645e.appspot.com\",\n  \n    messagingSenderId: \"513616031717\",\n  \n    appId: \"1:513616031717:web:b38a13db727cca2b82490c\"\n  \n  };\n\n  const firebaseApp = firebase.initializeApp(firebaseConfig);\n\n  // go to the firebase App we just initialized and grab the firestore database attached to it\n  // now we have access to the data\n  const db = firebaseApp.firestore();\n\n  // access to authentication\n  const auth = firebase.auth();\n\n  // so we will export the db and auth variables to access in our code\n  export { db, auth };\n\n  // first place we connect to is in our Feed.js\n\n","import React, {useState, useEffect} from 'react'\nimport './Feed.css'\nimport CreateIcon from '@material-ui/icons/Create'\nimport InputOption from './InputOption'\nimport ImageIcon from '@material-ui/icons/Image'\nimport SubscriptionsIcon from '@material-ui/icons/Subscriptions'\nimport EventNoteIcon from '@material-ui/icons/EventNote'\nimport CalendarViewDayIcon from '@material-ui/icons/CalendarViewDay'\nimport Post from './Post'\nimport { db } from \"./firebase\";\nimport firebase from 'firebase';\nimport { useSelector } from 'react-redux'\nimport { selectUser } from './features/userSlice'\n// react flip move\nimport FlipMove from 'react-flip-move'\n\n\nfunction Feed() {\n\n    // REDUX\n    const user = useSelector(selectUser);\n\n    const [posts, setPosts] = useState([]);\n    // user post input state\n    const [input, setInput] = useState('');\n\n    // useEffect fires code when the Feed Component loads\n    // and whenever the Feed Component re-renders, *IF* we don't pass in a second argument\n\n    // if we pass in an empty array [], as second arg, then useEffect only fires on initial load and never again\n    // so when useEffect runs, go to the firestore database and grab a current SNAPSHOT of all the posts in the posts table\n    // then take those posts from the firestore database and pass them into our App's state with setPosts()\n    // snapshot.docs.map((doc) => (...)) open parenthesis means implicit return -> return what ever is mapped over\n\n\n    useEffect(() => {\n\n            db.collection('posts').orderBy('timestamp', 'desc').onSnapshot((snapshot) => \n                \n                    setPosts(snapshot.docs.map((doc) => (       \n                        {\n                            id: doc.id,\n                            data: doc.data()\n                        }\n                    ))\n            ));\n    }, []); \n\n    const sendPost = event => {\n        event.preventDefault();\n\n        // every time user clicks sendPost - pull a snapshot from the firestore database and update posts []\n        // use the server timestamp, not the user local timestamp\n        db.collection('posts').add({\n            // name: 'Sonny Sangha',\n            // description: 'this is a test',\n            // message: input,\n            // photoUrl: '',\n            // timestamp: firebase.firestore.FieldValue.serverTimestamp()\n            name: user.displayName,\n            description: user.email,\n            message: input,\n            photoUrl: user.photoUrl || '',\n            timestamp: firebase.firestore.FieldValue.serverTimestamp()\n        });\n\n        setInput('');\n\n    }\n\n    // Helper function to convert Firebase timestamp to Date object (String) for display\n    function convertTimestamp(firebaseTimestamp) {\n\n        const newTimestamp = new Date(firebaseTimestamp.toDate()).toUTCString();\n        \n\n        return newTimestamp;\n    }\n\n    return (\n        <div className='feed'>\n\n            <div className=\"feed__inputContainer\">\n                <div className=\"feed__input\">\n                    <CreateIcon />\n                    <form>\n                        <input value={input} onChange={event => setInput(event.target.value)} type='text' />\n                        <button onClick={sendPost} type='submit'>Send</button>\n                    </form>\n                </div>\n\n                 {/* User Post Options */}\n            \n                <div className=\"feed__inputOptions\">\n                    {/* InputOption */}\n                    <InputOption title='Photo' Icon={ImageIcon} color='#70B5F9'/>\n                    <InputOption title='Video' Icon={SubscriptionsIcon} color='#e7a33e'/>\n                    <InputOption title='Event' Icon={EventNoteIcon} color='#c0cbcd'/>\n                    <InputOption title='Write' Icon={CalendarViewDayIcon} color='#7fc15e'/>\n                </div>\n\n            </div>\n\n           {/* FEED POSTS */}\n           {/* React Flip Move */}\n\n           <div className='posts'>\n                <FlipMove>\n                    {/* <Post name='Sonny Sangha' description='this is a test' message='this is a message'  /> */}\n                    \n                    {posts.map(({id, data: { name, description, message, photoUrl, timestamp }}) => (\n                        \n\n                        <Post  \n                            key={id}\n                            name={name}\n                            description={description}\n                            message={message}\n                            photoUrl={photoUrl}\n                            timestamp={timestamp?convertTimestamp(timestamp):''}\n                        />\n                    ))}\n                    </FlipMove>\n            </div>\n            \n            <br />\n\n           \n        </div>\n        \n    )\n}\n\nexport default Feed\n","import React from 'react'\nimport './HeaderOption.css'\nimport { Avatar } from '@material-ui/core'\nimport { useSelector } from 'react-redux'\nimport { selectUser } from './features/userSlice'\n\nfunction HeaderOption({ avatar, title, Icon, onClick}) {\n    // REDUX\n    const user = useSelector(selectUser);\n\n\n    return (\n        // <div onClick={onClick} className='headerOption'>\n        //     {Icon && <Icon className='headerOption__icon' />}\n        //     {avatar && (\n        //         <Avatar className='headerOption__icon' src={avatar} />\n        //     )}\n        //     <h3 className='headerOption__title'>{ title }</h3>\n        // </div>\n\n        <div onClick={onClick} className='headerOption'>\n            {Icon && <Icon className='headerOption__icon' />}\n\n            {avatar && (\n        <Avatar src={user.photoUrl} className=\"headerOption__icon\">{user?.displayName[0]}</Avatar>\n      )}\n            <h3 className='headerOption__title'>{ title }</h3>\n        </div>\n    )\n}\n\nexport default HeaderOption\n","import React from 'react'\nimport './Header.css'\nimport SearchIcon from '@material-ui/icons/Search';\nimport HeaderOption from './HeaderOption';\nimport HomeIcon from '@material-ui/icons/Home'\nimport SupervisorAccountIcon from '@material-ui/icons/SupervisorAccount'\nimport BusinessCenterIcon from '@material-ui/icons/BusinessCenter'\nimport ChatIcon from '@material-ui/icons/Chat'\nimport NotificationsIcon from '@material-ui/icons/Notifications'\nimport { useDispatch } from 'react-redux';\nimport { auth } from './firebase';\nimport { logout, selectUser } from './features/userSlice';\nimport { useSelector } from 'react-redux';\nimport { render } from '@testing-library/react';\n\nfunction Header() {\n    // REDUX\n    const dispatch = useDispatch();\n    const user = useSelector(selectUser);\n\n\n    // Logout Function when click on Avatar\n    const logoutOfApp = () => {\n        dispatch(logout());\n\n        auth.signOut();\n\n    }\n\n    if(user){\n         return (\n\n        \n                <div className='header'>\n\n                <div className=\"header__left\">\n\n                    <img src=\"https://cdn-icons-png.flaticon.com/512/174/174857.png\" alt=\"\" />\n                    <div className=\"header__search\">\n                        {/* Search Icon */}\n                        <SearchIcon />\n                        <input placeholder='Search' type=\"text\" />\n                    </div>\n\n                    \n                    \n\n                </div>\n\n                    <div className=\"header__right\">\n\n                        <span className='desktop'>\n                            <HeaderOption  Icon={HomeIcon}title='Home' />\n                            <HeaderOption  Icon={SupervisorAccountIcon}title='Network' />\n                            <HeaderOption  Icon={BusinessCenterIcon}title='Jobs' />\n                            <HeaderOption  Icon={ChatIcon}title='Messaging' />\n                            <HeaderOption  Icon={NotificationsIcon}title='Notifications' />\n\n                        </span>\n                            \n                        <p>\n                        <HeaderOption \n                                className='mobile'\n                                avatar={user ? true: false}\n                                    title={user ? 'Me': ''}\n                                    onClick={logoutOfApp}\n                            />\n                        </p>\n                            \n\n                    </div>\n\n                   \n        </div>\n    );\n         };\n\n    return <div className='header' />;\n}\n\nexport default Header\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { login } from \"./features/userSlice\";\nimport { auth } from \"./firebase\";\nimport \"./Login.css\";\n\nfunction Login() {\n\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [name, setName] = useState('');\n    const [profilePic, setProfilePic] = useState('');\n    //redux\n    const dispatch = useDispatch();\n\n    \n    // LOGIN\n    const loginToApp = (event) => {\n        event.preventDefault();\n\n        // FIREBASE - take Firebase User props and assign them to REDUX Store user props for display\n        auth.signInWithEmailAndPassword(email, password)\n        .then(userAuth => {\n            dispatch(\n                login({\n                    email: userAuth.user.email,\n                    uid: userAuth.user.uid,\n                    displayName: userAuth.user.displayName,\n                    profileUrl: userAuth.user.photoUrl\n                })\n            );\n        }).catch(error => alert(error));\n        \n\n    };\n\n    // REGISTER\n    const register = () => {\n        if (!name) {\n            return alert(\"Please enter a full name!\")\n        }\n\n        // FIREBASE - create new user in Firebase\n        auth.createUserWithEmailAndPassword(email, password)\n        // send firebase the user provided name and photo\n        .then((userAuth) => {\n            userAuth.user.updateProfile({\n                displayName: name,\n                photoURL: profilePic\n            })\n            // REDUX - then take those values back from Firebase userAuth object and assign them to our Redux user in state\n            .then(() => {\n                dispatch(\n                    login({\n                        email: userAuth.user.email,\n                        uid: userAuth.user.uid,\n                        displayName: name,\n                        photoUrl: profilePic\n                    })\n                );\n            });\n        }).catch(error => alert(error, error.message));\n\n    }\n\n\n    return (\n        <div className='login'>\n            <img src='https://news.hitb.org/sites/default/files/styles/large/public/field/image/500px-LinkedIn_Logo.svg__1.png?itok=q_lR0Vks'\n                alt='LinkedIn Logo' />\n\n                {/* Log in Form */}\n                <form>\n                    <input \n                        value={name}\n                        onChange={(event) => setName(event.target.value)} \n                        placeholder='Full Name (required if registering)' \n                        type='text' \n\n                        />\n\n                    <input \n                        value={profilePic}\n                        onChange={(event) => setProfilePic(event.target.value)}\n                        placeholder='Profile Pic URL (optional)' \n                        type=\"text\" \n                    />\n\n                    <input \n                        value = {email} \n                        onChange={(event) => setEmail(event.target.value)}\n                        placeholder='Email' \n                        type=\"email\" \n                    />\n\n                    <input \n                        value={password}\n                        onChange={(event) => setPassword(event.target.value)} \n                        placeholder='Password' \n                        type=\"password\" \n                    />\n\n                    <button type='submit' onClick={loginToApp}>Sign In</button>\n\n\n                </form>\n\n                <span>\n                    Not a member ? {\"  \"}\n                    <span className='login__register' onClick={register}>\n                        Register Now\n                    </span>\n                </span>\n\n                <span style={{color: 'green'}}>\n                    **Please use email 'test@test.com' and password 'linkedin' for demo purposes**\n                </span>\n        </div>\n    );\n}\n\nexport default Login\n","import { Avatar } from '@material-ui/core'\nimport React from 'react'\nimport { useSelector } from 'react-redux';\nimport { selectUser } from './features/userSlice';\nimport './Sidebar.css'\n\nfunction Sidebar() {\n\n    // Get User from the REDUX STORE\n    const user = useSelector(selectUser);\n\n    // display recent on bottom\n    const recentItem = (topic) => (\n        <div className=\"sidebar__recentItem\">\n            <span className=\"sidebar__hash\">#</span>\n            <p>{topic}</p>\n        </div>\n    );\n\n\n\n\n\n    return (\n        <div className='sidebar'>\n            <div className=\"sidebar__top\">\n                <img src=\"https://images.unsplash.com/photo-1579546929518-9e396f3cc809?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxleHBsb3JlLWZR8MXx8fGVufDB8fHw%3D&w=1000&q=80\" alt=\"\" />\n                {/* If user has no profile pic, then use first letter of first name */}\n                <Avatar src={user.photoUrl} className='sidebar__avatar' >{user.displayName[0]}</Avatar>\n                {/* <h2>Sonny Sangha</h2>\n                <h4>sonny.sangha@gmail.com</h4> */}\n                <h2>{user.displayName}</h2>\n                <h4>{user.email}</h4>\n            </div>\n\n            <div className=\"sidebar__stats\">\n\n                <div className=\"sidebar__stat\">\n\n                    <p>Who viewed you</p>\n                    <p className=\"sidebar__statNumber\">\n                        2,543\n                    </p>\n                </div>\n\n                <div className=\"sidebar__stat\">\n\n                <p>Views on post</p>\n                    <p className=\"sidebar__statNumber\">\n                        1,232\n                    </p>\n                    \n                </div>\n            </div>\n\n            <div className=\"sidebar__bottom\">\n                    <p>Recent</p>\n                    {recentItem(\"reactjs\")}\n                    {recentItem(\"programming\")}\n                    {recentItem(\"softwareengineering\")}\n                    {recentItem(\"design\")}\n                    {recentItem(\"developer\")}\n            </div>\n\n        </div>\n    )\n}\n\nexport default Sidebar\n","import React from 'react'\nimport './Widgets.css'\nimport InfoIcon from '@material-ui/icons/Info'\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord'\nimport axios from 'axios'\n\nfunction Widgets() {\n    const newsArticle = (heading, subtitle) => (\n        <div className=\"widgets__article\">\n        <div className=\"widgets__articleLeft\">\n            <FiberManualRecordIcon />\n        </div>\n\n        <div className=\"widgets__articleRight\">\n            <h4>{heading}</h4>\n            <p>{subtitle}</p>\n        </div>\n        </div>\n    );\n\n    return (\n        <div className=\"widgets\">\n        <div className=\"widgets__header\">\n            <h2>LinkedIn News</h2>\n            <InfoIcon />\n        </div>\n\n        {newsArticle(\"S&P 500 reaches all time high\", \"Top News - 9099 readers\")}\n        {newsArticle(\"Coronavirus: US updates\", \"Top News - 886 readers\")}\n        {newsArticle(\"Tesla hits new highs\", \"Cars & Auto - 300 readers\")}\n        {newsArticle(\"Bitcoin Breaks $55k\", \"Crypto - 8000 readers\")}\n        {newsArticle(\"React v.17 is here!\", \"Code - 123 readers\")}\n        </div>\n    );\n}\n\nexport default Widgets\n\n// WOULD LIKE TO SET UP REAL NEWS HEADLINES\n\n// WITH AXIOS GET REQUESTS TO THIS NEWS API\n\n// https://github.com/SauravKanchan/NewsAPI\n\n\n// function getUSBusinessHeadline() {\n    //     axios.get('https://saurav.tech/NewsAPI/top-headlines/category/business/us.json').then(\n    //         (response) => {\n    //             const result = response.data.articles[0].title;\n    //             // console.log(result.toString());\n    //             return result.toString();\n    //         },\n    //         (error) => {\n    //             console.log(error);\n    //         }\n    //     );\n\n\n    // }\n\n    // const getUSTechHeadline = () => {\n    //     axios.get('https://saurav.tech/NewsAPI/top-headlines/category/technology/us.json').then(\n    //         (response) => {\n    //             const result = JSON.stringify(response.data.articles[0].title);\n    //             console.log(result);\n    //             return result;\n    //         },\n    //         (error) => {\n    //             console.log(error);\n    //         }\n    //     );\n\n\n    // }\n    \n    // console.log(getUSBusinessHeadline());\n    // console.log(getUSTechHeadline());","import React from 'react'\nimport HeaderOption from './HeaderOption'\nimport HomeIcon from '@material-ui/icons/Home'\nimport SupervisorAccountIcon from '@material-ui/icons/SupervisorAccount'\nimport BusinessCenterIcon from '@material-ui/icons/BusinessCenter'\nimport ChatIcon from '@material-ui/icons/Chat'\nimport NotificationsIcon from '@material-ui/icons/Notifications'\nimport './Footer.css'\n\nfunction Footer() {\n    return (\n        <div className='footer' style={{visibility: 'hidden'}}>\n             <div className=\"footer__options\" >\n                            \n                            \n                            <HeaderOption Icon={HomeIcon}title='Home' />\n                            <HeaderOption Icon={SupervisorAccountIcon}title='Network' />\n                            <HeaderOption Icon={BusinessCenterIcon}title='Jobs' />\n                            <HeaderOption Icon={ChatIcon}title='Messaging' />\n                            <HeaderOption Icon={NotificationsIcon}title='Notifications' />\n\n                    </div>\n        </div>\n    )\n}\n\nexport default Footer\n","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"./App.css\";\nimport { login, logout, selectUser } from \"../src/features/userSlice\";\nimport Feed from \"./Feed\";\nimport { auth } from \"./firebase\";\nimport Header from \"./Header\";\nimport Login from \"./Login\";\nimport Sidebar from \"./Sidebar\";\nimport Widgets from \"./Widgets\";\nimport Footer from \"./Footer\";\n\nfunction App() {\n\n  // pull user object out from REDUX, see src/features/userSlice/Selectors\n  const user = useSelector(selectUser);\n  // REDUX\n  const dispatch = useDispatch();\n\n  // persist user log in to Firebase from app redux state\n  // onAuthChange is a listener that listens for any change in Auth state, login, logout, did the user change?\n  useEffect(() => {\n    auth.onAuthStateChanged(userAuth => {\n      if (userAuth) {\n        // user is logged in - assign Firebase userAuth props to our REDUX user\n        dispatch(login({\n            email: userAuth.email,\n            uid: userAuth.uid,\n            displayName: userAuth.displayName,\n            photoUrl: userAuth.photoURL\n        }));\n\n      } else {\n        // user is logged out\n        dispatch(logout());\n      }\n    })\n  }, []);\n\n\n  \n\n  return (\n    <div className=\"app\">\n\n      {/* Header */}\n      <Header />\n\n      {/* If user not logged in, only display Login Page */}\n      {!user ? (\n          <Login />\n      ) : (\n\n        \n        <div className=\"app__body\">\n            {/* Sidebar */} \n            <Sidebar />\n\n            {/* Feed */}\n            <Feed />\n            {/* Widgets */}\n            <Widgets />\n\n            {/* Footer for Mobile only*/}\n            <Footer />\n            \n            \n            </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport userReducer from \"../features/userSlice\";\n\nexport default configureStore({\n  reducer: {\n    user: userReducer,\n  },\n});","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}